/**
 * AI Configuration for Edge Function
 *
 * ⚠️ SYNC WARNING ⚠️
 * ==================
 * This file is DUPLICATED from the frontend and must be manually synced.
 *
 * SOURCE OF TRUTH: src/config/aiConfig.ts (edit that one, NOT this file)
 * SYNCED TO:       supabase/functions/ai-notes-check/config.ts (THIS FILE)
 *
 * WHY: Edge Functions cannot import from src/ directory (Deno runtime limitation)
 *
 * DO NOT EDIT THIS FILE DIRECTLY - edit src/config/aiConfig.ts instead!
 * After editing frontend config, run: npm run deploy:edge
 *
 * FUTURE: Consider moving to database-backed config or build-time sync script
 */

// ============================================================================
// AI Configuration Constants
// ============================================================================

export const AI_CONFIG = {
  /**
   * AI Model to use for notes analysis
   * Claude Haiku 4.5: Fast, cost-effective, suitable for frequent use
   */
  MODEL: 'claude-haiku-4-5-20251001' as const,

  /**
   * Comment constraints
   */
  MAX_COMMENT_LENGTH: 200, // Keep suggestions concise and actionable
  MIN_SELECTED_TEXT_LENGTH: 5, // Minimum characters for text anchoring (prevents ambiguous matches)
  MAX_RETRY_ATTEMPTS: 3, // Maximum retry attempts for text matching failures

  /**
   * Processing limits
   */
  MAX_COMMENTS_PER_RUN: 20, // Prevent excessive API costs and overwhelming suggestions

  /**
   * System Prompt
   * Defines AI role, task, constraints, rules, and JSON schema
   */
  SYSTEM_PROMPT: `# Goal:
Generate high-value, impactful, actionable suggestions to improve educational notes.

# Guidelines:
- Avoid duplicates: If existing AI suggestions already cover a topic or text segment, avoid creating another suggestion about it or something similar (same text with different wording, same missing concept, or same correction). When in doubt, skip it. Quality over quantity.
- Only suggest genuinely new improvements
- For selected-text: Copy text EXACTLY from notes (character-for-character)
- Keep suggestions under 200 characters
- Focus on: missing key concepts, unclear phrasing, factual errors, structure

# Comment Rules:

## Category Types:
- selected_text: Anchored to passage (exact quoted text, min 5 chars)
- general: Broad observation not tied to specific text

## Suggestion Types:
- missing_concept: Key topics from source material not in notes (use selected_text if anchoring to where it should be added, or general if broadly applicable)
- rewording: Clearer phrasing for existing text (must use selected_text category and quote the exact text to be reworded)
- factual_correction: Inaccuracies vs source material (must use selected_text category and quote the exact inaccurate text)
- structural_suggestion: Better organization or removing duplicate/redundant information from notes (use selected_text if pointing to specific section, or general for overall structure)

# Provided Content:
- {USER_NOTES}: The user's current notes text that you are improving.
- {RESOURCE_METADATA}: The metadata of the resource that the user is improving notes for, this is your source of truth for the content of the resource, and what you are basing your suggestions on.
- {EXISTING_AI_SUGGESTIONS}: The existing AI suggestions that have already been created for the user's notes. These are provided to help you avoid creating duplicate and repetitive suggestions.

# JSON Schema and Output Format:

Analyze the user notes and provide improvement suggestions as JSON comments.
Return a JSON object with this exact structure:

{
  "comments": [
    {
      "category": "general" | "selected_text",
      "suggestionType": "missing_concept" | "rewording" | "factual_correction" | "structural_suggestion",
      "body": "Your suggestion (max 200 chars)",
      "selectedText": "exact text from notes" | null
    }
  ]
}

## Schema Rules:
- "selectedText" is required (non-null) if category is "selected_text"
- "selectedText" must be null if category is "general"
- "body" must be under 200 characters
- "selectedText" must be minimum 5 characters if provided
- Return empty array if no suggestions needed`,
} as const;

// ============================================================================
// Metadata Configuration
// ============================================================================

export const AI_METADATA_CONFIG: Record<string, string[]> = {
  'short-video': [
    'description',
    'transcript',
    'author',
    'creator',
    'channelName',
  ],
  video: [
    'description',
    'transcript',
    'author',
    'creator',
    'channelName',
  ],
  book: [
    'description',
    'author',
    'url',
  ],
  article: [
    'description',
    'author',
    'url',
  ],
  podcast: [
    'description',
    'author',
    'url',
  ],
} as const;

/**
 * Extract AI-relevant metadata from a resource
 */
export function getAIMetadataForResource(resource: Record<string, unknown>): Record<string, unknown> {
  const type = resource.type as string;
  const fields = AI_METADATA_CONFIG[type] || [];

  const metadata: Record<string, unknown> = {};

  for (const field of fields) {
    const value = resource[field];
    if (value !== null && value !== undefined && value !== '') {
      metadata[field] = value;
    }
  }

  return metadata;
}
