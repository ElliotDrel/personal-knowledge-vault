/**
 * AI Configuration for Edge Function
 *
 * ⚠️ SYNC WARNING ⚠️
 * ==================
 * This file is DUPLICATED from the frontend and must be manually synced.
 *
 * SOURCE OF TRUTH: src/config/aiConfig.ts (edit that one, NOT this file)
 * SYNCED TO:       supabase/functions/ai-notes-check/config.ts (THIS FILE)
 *
 * WHY: Edge Functions cannot import from src/ directory (Deno runtime limitation)
 *
 * DO NOT EDIT THIS FILE DIRECTLY - edit src/config/aiConfig.ts instead!
 * After editing frontend config, run: npm run deploy:edge
 *
 * FUTURE: Consider moving to database-backed config or build-time sync script
 */

// ============================================================================
// AI Configuration Constants
// ============================================================================

export const AI_CONFIG = {
  /**
   * AI Model to use for notes analysis
   * Claude Haiku 4.5: Fast, cost-effective, suitable for frequent use
   */
  MODEL: 'claude-haiku-4-5-20251001' as const,

  /**
   * Comment constraints
   */
  MAX_COMMENT_LENGTH: 200, // Keep suggestions concise and actionable
  MIN_SELECTED_TEXT_LENGTH: 5, // Minimum characters for text anchoring (prevents ambiguous matches)
  MAX_RETRY_ATTEMPTS: 3, // Maximum retry attempts for text matching failures

  /**
   * Processing limits
   */
  MAX_COMMENTS_PER_RUN: 20, // Prevent excessive API costs and overwhelming suggestions

  /**
   * System Prompt
   * Defines AI role, task, constraints, and rules
   */
  SYSTEM_PROMPT: `You are an AI assistant helping users improve their notes on educational content (videos, books, articles).

Your task: Analyze user notes and metadata, then suggest improvements as comments.

CRITICAL RULES:
1. For selected-text comments: Provide EXACT character-for-character text from notes
   - If text appears multiple times, expand selection to make it unique
   - Minimum 5 characters for selected text
   - Copy text EXACTLY, including punctuation and spacing
2. Keep ALL suggestions under 200 characters (concise, actionable)
3. Do NOT duplicate suggestions already provided by AI
4. Maximum 20 suggestions per run
5. Focus on substance: missing concepts, clarity issues, factual accuracy, organization

SUGGESTION TYPES:
- missing_concept: Important topics from source material not captured in notes
- rewording: Suggest clearer, more precise phrasing for existing text
- factual_correction: Flag potential inaccuracies compared to source material
- structural_suggestion: Recommend better organization or formatting

CATEGORY TYPES:
- general: Broad observations not tied to specific text (e.g., overall structure, missing summary)
- selected_text: Anchored to specific passage (must provide exact quoted text)

OUTPUT FORMAT: Return valid JSON only (no markdown, no explanations).`,

  /**
   * JSON Schema Instructions
   * Specifies exact structure AI must return
   */
  JSON_SCHEMA_INSTRUCTIONS: `Return a JSON object with this exact structure:

{
  "comments": [
    {
      "category": "general" | "selected_text",
      "suggestionType": "missing_concept" | "rewording" | "factual_correction" | "structural_suggestion",
      "body": "Your suggestion (max 200 chars)",
      "selectedText": "exact text from notes" | null
    }
  ]
}

RULES:
- "selectedText" is required (non-null) if category is "selected_text"
- "selectedText" must be null if category is "general"
- "body" must be under 200 characters
- "selectedText" must be minimum 5 characters if provided
- Return empty array if no suggestions needed`,
} as const;

// ============================================================================
// Metadata Configuration
// ============================================================================

export const AI_METADATA_CONFIG: Record<string, string[]> = {
  'short-video': [
    'description',
    'author',
    'creator',
    'channelName',
    'handle',
    'transcript',
    'platform',
    'url',
    'normalizedUrl',
    'duration',
    'viewCount',
    'likeCount',
    'publishedAt',
  ],
  video: [
    'description',
    'transcript',
    'author',
    'creator',
    'channelName',
    'platform',
    'duration',
    'url',
    'normalizedUrl',
    'viewCount',
    'likeCount',
    'publishedAt',
  ],
  book: [
    'description',
    'author',
    'year',
    'publisher',
    'isbn',
    'pageCount',
    'url',
  ],
  article: [
    'url',
    'author',
    'platform',
    'description',
    'publishedAt',
    'siteName',
  ],
  podcast: [
    'description',
    'transcript',
    'creator',
    'platform',
    'duration',
    'url',
    'publishedAt',
    'episodeNumber',
    'showName',
  ],
} as const;

/**
 * Extract AI-relevant metadata from a resource
 */
export function getAIMetadataForResource(resource: Record<string, unknown>): Record<string, unknown> {
  const type = resource.type as string;
  const fields = AI_METADATA_CONFIG[type] || [];

  const metadata: Record<string, unknown> = {};

  for (const field of fields) {
    const value = resource[field];
    if (value !== null && value !== undefined && value !== '') {
      metadata[field] = value;
    }
  }

  return metadata;
}
