/**
 * AI Configuration for Edge Function
 *
 * ⚠️ SYNC WARNING ⚠️
 * ==================
 * This file is DUPLICATED from the frontend and must be manually synced.
 *
 * SOURCE OF TRUTH: src/config/aiConfig.ts (edit that one, NOT this file)
 * SYNCED TO:       supabase/functions/ai-notes-check/config.ts (THIS FILE)
 *
 * WHY: Edge Functions cannot import from src/ directory (Deno runtime limitation)
 *
 * DO NOT EDIT THIS FILE DIRECTLY - edit src/config/aiConfig.ts instead!
 * After editing frontend config, run: npm run deploy:edge
 *
 * FUTURE: Consider moving to database-backed config or build-time sync script
 */

// ============================================================================
// AI Configuration Constants
// ============================================================================

export const AI_CONFIG = {
  /**
   * AI Model to use for notes analysis
   * Claude Haiku 4.5: Fast, cost-effective, suitable for frequent use
   */
  MODEL: 'claude-haiku-4-5-20251001' as const,

  /**
   * Comment constraints
   */
  MAX_COMMENT_LENGTH: 200, // Keep suggestions concise and actionable
  MIN_SELECTED_TEXT_LENGTH: 5, // Minimum characters for text anchoring (prevents ambiguous matches)
  MAX_RETRY_ATTEMPTS: 3, // Maximum retry attempts for text matching failures

  /**
   * Processing limits
   */
  MAX_COMMENTS_PER_RUN: 20, // Prevent excessive API costs and overwhelming suggestions

  /**
   * System Prompt
   * Defines AI role, task, constraints, and rules
   */
  SYSTEM_PROMPT: `You are an expert analyst improving educational notes. Your focus: high-value, NON-DUPLICATE suggestions only.

CRITICAL ANTI-DUPLICATION RULE (HIGHEST PRIORITY):
If existing AI suggestions already cover a topic or text segment, DO NOT create another suggestion about it. This includes:
- Same text with different wording (e.g., "Clarify X" vs "Add context for X" = DUPLICATE)
- Same missing concept (e.g., "Add book Y" already suggested = DUPLICATE)
- Same correction (e.g., "Fix author name" already suggested = DUPLICATE)
When in doubt, skip it. Quality over quantity.

Your workflow:
1. Review ALL existing suggestions first - note what topics/text are already addressed
2. Analyze notes vs source material
3. For each potential suggestion, ask: "Does an existing suggestion already cover this topic or text?" If yes, SKIP IT.
4. Only suggest genuinely new improvements

Guidelines:
- For selected-text: Copy text EXACTLY from notes (character-for-character)
- Keep suggestions under 200 characters
- Focus on: missing key concepts, unclear phrasing, factual errors, structure

Suggestion Types:
- missing_concept: Key topics from source not in notes
- rewording: Clearer phrasing for existing text
- factual_correction: Inaccuracies vs source
- structural_suggestion: Better organization

Category Types:
- selected_text: Anchored to passage (exact quoted text, min 5 chars)
- general: Broad observation not tied to specific text

Output: Valid JSON only (no markdown fences).`,

  /**
   * JSON Schema Instructions
   * Specifies exact structure AI must return
   */
  JSON_SCHEMA_INSTRUCTIONS: `Return a JSON object with this exact structure:

{
  "comments": [
    {
      "category": "general" | "selected_text",
      "suggestionType": "missing_concept" | "rewording" | "factual_correction" | "structural_suggestion",
      "body": "Your suggestion (max 200 chars)",
      "selectedText": "exact text from notes" | null
    }
  ]
}

RULES:
- "selectedText" is required (non-null) if category is "selected_text"
- "selectedText" must be null if category is "general"
- "body" must be under 200 characters
- "selectedText" must be minimum 5 characters if provided
- Return empty array if no suggestions needed`,
} as const;

// ============================================================================
// Metadata Configuration
// ============================================================================

export const AI_METADATA_CONFIG: Record<string, string[]> = {
  'short-video': [
    'description',
    'author',
    'creator',
    'channelName',
    'handle',
    'transcript',
    'platform',
    'url',
    'normalizedUrl',
    'duration',
    'viewCount',
    'likeCount',
    'publishedAt',
  ],
  video: [
    'description',
    'transcript',
    'author',
    'creator',
    'channelName',
    'platform',
    'duration',
    'url',
    'normalizedUrl',
    'viewCount',
    'likeCount',
    'publishedAt',
  ],
  book: [
    'description',
    'author',
    'year',
    'publisher',
    'isbn',
    'pageCount',
    'url',
  ],
  article: [
    'url',
    'author',
    'platform',
    'description',
    'publishedAt',
    'siteName',
  ],
  podcast: [
    'description',
    'transcript',
    'creator',
    'platform',
    'duration',
    'url',
    'publishedAt',
    'episodeNumber',
    'showName',
  ],
} as const;

/**
 * Extract AI-relevant metadata from a resource
 */
export function getAIMetadataForResource(resource: Record<string, unknown>): Record<string, unknown> {
  const type = resource.type as string;
  const fields = AI_METADATA_CONFIG[type] || [];

  const metadata: Record<string, unknown> = {};

  for (const field of fields) {
    const value = resource[field];
    if (value !== null && value !== undefined && value !== '') {
      metadata[field] = value;
    }
  }

  return metadata;
}
